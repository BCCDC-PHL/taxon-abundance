manifest {
    author = 'Dan Fornika'
    name = 'BCCDC-PHL/taxon-abundance'
    description = 'Taxon Abundance'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.01.0'
    version = '0.1.9'
}

params {
    profile = false
    cache = ''
    illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
    fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
    fastq_search_path = makeFastqSearchPath( illumina_suffixes, fastq_exts )
    fastq_input = 'NO_FILE'
    samplesheet_input = 'NO_FILE'
    kraken_db = '/data/ref_databases/kraken2/latest_standard'
    bracken_db = '/data/ref_databases/kraken2/latest_standard'
    confidence = 0.0
    taxonomic_level = "S"
    read_length = 150
    versioned_outdir = false
    extract_reads = false
    extract_reads_threshold = 1.0
    skip_bracken = false
    collect_outputs = false
    collected_outputs_prefix = 'collected'
    pipeline_short_name = parsePipelineName(manifest.toMap().get('name'))
    pipeline_minor_version = parseMinorVersion(manifest.toMap().get('version'))
}

def parseMinorVersion(version) {
    minor_version = version.split('\\.')[0..1].join('.')
    return minor_version
}

def parsePipelineName(name) {
    short_name = name.split('/')[1]
    return short_name
}


def makeFastqSearchPath ( illumina_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

profiles {
    conda {
        conda.enabled = true
	process.conda = "$baseDir/environments/environment.yml"
	if (params.cache){
	    conda.cacheDir = params.cache
	}
    }
    apptainer {
        apptainer.enabled = true
        process.container = "oras://ghcr.io/bccdc-phl/taxon-abundance:82e3606c05748fd1"
        if (params.cache){
            apptainer.cacheDir = params.cache
        }
    }
}

process {
    withName: kraken2 { 
	cpus = 8 
	memory = '72 GB'
    }
}
